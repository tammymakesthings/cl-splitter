#!/usr/bin/env cl-splitter --profile c-cplusplus
/*#[divert :to "include/blink.h"]*/
#pragma once
#ifndef __HAS_BLINK_H__
#define __HAS_BLINK_H__

#ifndef LED_PIN
#define LED_PIN LL_GPIO_PIN_5
#endif /* LED_PIN */

#ifndef LED_GPIO_PORT
#define LED_GPIO_PORT GPIOA
#endif /* LED_GPIO_PORT */

#if !defined(LED_GPIO_CLK_ENABLE)
#define LED_GPIO_CLK_ENABLE()                                                  \
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA)
#endif

#endif /* __HAS_BLINK_H__*/
/*#[divert :to "src/main.cpp"]*/
#include "stm32f4xx_ll_bus.h"
#include "stm32f4xx_ll_gpio.h"
#include "stm32f4xx_ll_rcc.h"
#include "stm32f4xx_ll_system.h"
#include "stm32f4xx_ll_utils.h"

#include "blink.h"

void Configure_GPIO(void) {
  LED_GPIO_CLK_ENABLE();
  LL_GPIO_SetPinMode(LED_GPIO_PORT, LED_PIN, LL_GPIO_MODE_OUTPUT);
}

void SystemClock_Config(void) {
  /* Enable HSE oscillator */
  LL_RCC_HSE_EnableBypass();
  LL_RCC_HSE_Enable();
  while (LL_RCC_HSE_IsReady() != 1) {
  };

  /* Set FLASH latency */
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 400,
                              LL_RCC_PLLP_DIV_4);
  LL_RCC_PLL_Enable();
  while (LL_RCC_PLL_IsReady() != 1) {
  };

  /* Sysclk activation on the main PLL */
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
  };

  /* Set APB1 & APB2 prescaler */
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);

  /* Update CMSIS variable (which can be updated also through
   * SystemCoreClockUpdate function) */
  SystemCoreClock = SYS_CLOCK;

  LL_Init1msTick(SystemCoreClock);
}

int main(void) {
  SystemClock_Config();

  Configure_GPIO();
  while (1) {
    LL_GPIO_TogglePin(LED_GPIO_PORT, LED_PIN);
    LL_mDelay(1000);
  }
}

void NMI_Handler(void) {}

void HardFault_Handler(void) {
  while (1) {
  }
}

void MemManage_Handler(void) {
  while (1) {
  }
}

void BusFault_Handler(void) {
  while (1) {
  }
}

void UsageFault_Handler(void) {
  while (1) {
  }
}

void SVC_Handler(void) {}

void DebugMon_Handler(void) {}

void PendSV_Handler(void) {}

/*#[divert :to "platformio.ini"]*/
; PlatformIO Project Configuration File

[platformio]
default_envs = bluepillstm32
description = "STM32F103 BluePill test project"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Global Configuration
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
[env]
build_flags =
    -D VERSION=1.0.0
    -D DEBUG=1
    -Os
lib_deps_builtin =
lib_deps_external =

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Configuration: STM32F103 Blue PIll
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[env:bluepillstm32]

;; Board Configuration
platform = https://github.com/platformio/platform-ststm32/
board = bluepill_f103c8
board_build.mcu = stm32f108c3
board_build.f_cpu = 72000000L
board_build.stm32cube.custom_config_header = yes
framework = stm32cube

;; Build Configuration
build_flags =
    ${env.build_flags}
    -Wl,--no-warn-rwx-segment
    -DSYS_CLOCK=72000000L
lib_deps =
    ${env.lib_deps_builtin}
    ${env.lib_deps_external}

;; Upload Configuration
upload_protocol = stlink

;; Debug Configuration
debug_tool = stlink
debug_init_cmds =
    target extended-remote $DEBUG_PORT
    $INIT_BREAK
    monitor reset halt
    $LOAD_CMDS
    monitor init
    monitor reset halt

;; Test Configuration
test_ignore = test_desktop

;; Monitor Configuration
monitor_speed = 115200
monitor_flags =
    --encoding
    hexlify

/*#[divert :to "README.md"]*/
# STM32Cube Blink Example
